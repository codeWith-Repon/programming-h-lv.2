-- Active: 1747413686708@@127.0.0.1@5432@ph
/*
sql declarative way te kaj kore
declarative: amra shodhu bole dei ki kaj korete hbe
imparative: amra bole dei ki vabe korte heb, ki korte hbe

                    @Procedural(imprative) Approach:
    1. Language Support: Supports procedural languages like PL/pgSQL, PL/Perl, PL/Python, etc.
    2. Complex Logic: Allows for complex logic using control structures like loops, conditionals, and exception handling.
    3. Variable Support: Supports variable declarations and manipulation within the procedural code.
    4. Stored Procedures/Functions: Provides the ability to create stored procedures or functions, 

                    @Non-Procedural(declarative) Approach:
    1. Declarative Queries: Focuses on writing declarative SQL queries to retrieve, insert, update, or delete data from the database.
    2. Simplicity: Emphasizes simplicity by expressing operations in terms of what data is needed.
    3. SQL Functions: Supports SQL functions, which are single SQL statements that return a value or set of values.
    4. Performance: Can sometimes offer better performance for simple operations due to the optimized query execution plans generated by the database engine.
*/

SELECT * FROM employees;

SELECT count(*) FROM employees;

CREATE Function emp_count()
RETURNS INT
LANGUAGE SQL
AS
$$
    SELECT count(*) FROM employees;
$$

CREATE FUNCTION delete_emp()
RETURNS void
LANGUAGE SQL
AS
$$
    DELETE FROM employees WHERE employee_id = 30

$$

CREATE or REPLACE FUNCTION delete_emp1()
RETURNS void
LANGUAGE SQL
AS
$$
    DELETE FROM employees WHERE employee_id = 29;

$$

SELECT emp_count();
SELECT delete_emp();
SELECT delete_emp1();


CREATE or REPLACE FUNCTION delete_emp_by_id(p_emp_id INT)
RETURNS void
LANGUAGE SQL
AS
$$
    DELETE FROM employees WHERE employee_id = p_emp_id;

$$

SELECT delete_emp_by_id(28);

SELECT * FROM employees;


